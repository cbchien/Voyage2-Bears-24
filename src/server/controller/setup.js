const { ServerNamespace } = require('./utils')
const gsheets = require('../model/gsheets')

class Setup extends ServerNamespace {
  /**
   * Generate the client_secret.json file containing details to
   * connect to and use Google Sheets API
   * @param {Object} data
   * @param {string} data.clientId - Client ID
   * @param {string} data.clientSecret - Client Secret
   * @param {string} data.redirectUri - Redirect URL
   * @param {string} data.settingsDocId - Google Sheets Settings Document
   * @param {Function} reply - Callback function to reply the client's request
   */
  async setCredentials(data, reply) {
    try {
      const validate = this.hasRequiredFields(data, [
        'clientId', 'clientSecret', 'redirectUri', 'settingsDocId',
      ])
      if (validate.hasError) {
        reply(validate)
      } else {
        const {
          clientId,
          clientSecret,
          redirectUri,
          settingsDocId,
        } = data
        gsheets.saveCredentials(clientId, clientSecret, redirectUri, settingsDocId)
        reply({ status: 'OK!' })
      }
    } catch ({ message }) {
      reply({ hasError: true, generalError: { message } })
    }
  }

  /**
   * Generate a URL that will provide an access code
   * @param {*} data - null, it's not used
   * @param {Function} reply - Callback to reply the client's request
   */
  async getAuthUrl(data, reply) {
    reply({
      url: gsheets.generateAuthUrl(),
    })
  }
  /**
   * Authorize the application to access the user's Google Sheet Documents
   * @param {string} code - access code generated by the provided URL
   * @param {Function} reply - Callback to reply the client's request
   */
  async authorize(data, reply) {
    try {
      const validate = this.hasRequiredFields(data, ['code'])
      if (validate.hasError) {
        reply(validate)
      } else {
        await gsheets.getNewToken(data.code)
        gsheets.initialize()
        reply({ status: 'OK!' })
      }
    } catch (error) {
      reply({
        hasError: true,
        fieldErrors: {
          code: { validateStatus: 'error' },
        },
        generalError: {
          message: error.message === 'invalid_request'
            ? 'Invalid Code or Setup Credentials'
            : error.message,
        },
      })
    }
  }
}

module.exports = Setup
